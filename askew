#!/usr/bin/env ruby

require 'yaml'
require 'todo-txt'
require 'pry'
require 'thor'

require_relative 'lib/startup.rb'
require_relative 'lib/config.rb'
require_relative 'lib/string.rb'

VERSION_MAJOR    = '0'
VERSION_MINOR    = '0'
VERSION_PATCH    = '1'

VERSION = VERSION_MAJOR + "." +  VERSION_MINOR + "." +VERSION_PATCH

class List < Thor
  
  desc "all", "List all tasks"
  def all
    begin
      list = Todo::List.new Startup.config.todo_file
      #puts list.by_priority "A"
      #binding.pry
      #puts list.sort_by { |task| task.priority }
      puts list.sort_by {|item| [item.priority ? 0 : 1, item.priority || 0]} # list by priorty with nulls at the end
    rescue
      puts "Unable to load your todo list."
    end
  end
  
  default_task :all

end

class Version < Thor

  desc "all", "Print all the components of the application version"
  def all 
    puts VERSION 
  end

  desc "major", "Print only the major version of the application version"
  def major
    puts VERSION_MAJOR
  end
  
  desc "minor", "Print only the minor version of the application version"
  def minor
    puts VERSION_MINOR
  end
  
  desc "patch", "Print only the patch version of the application version"
  def patch
    puts VERSION_PATCH
  end
  
  default_task :all
end

class CLI < Thor

  @@version = "0.0.1"
  
  class_option 'config', :aliases => '-c', :type => :string, :default => nil 

  #desc "version", "print the application version"
  #remove_class_option 'config'
  #def version
  #  puts @@version 
  #end

  desc "version" ,  "Display the application version"
  subcommand "version", Version

  desc "hello NAME", "Say hello to NAME"
  def hello(name)
    puts "Hello #{name}"
  end

  desc "colortest", "Print pretty colors to the screen"
  def colortest
    puts "Color should be red".red
    puts "Non bold" + " text should be bold".bold + " Non Bold again."
  end

  desc "list", "List all the tasks"
  subcommand "list", List 

  default_task :list 

  def initialize(*args)
    super
    #puts args
    Startup.process_config options[:config]
  end

  no_commands do
    def _get_config_arg
      options[:config]
    end
  end 

end

# Start the program
CLI.start(ARGV)
exit 0

